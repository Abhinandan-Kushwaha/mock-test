{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/abhinandan/Texts/mocktest/mocktest-web/src/components/TestScreen/index.js\";\nimport React from 'react';\nimport './index.css';\nimport API from '../../utils/API';\nimport { QuestionCard } from '../QuestionCard';\nexport default class TestScreen extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = async () => {\n      API.get('mockTest/').then(res => {\n        this.setState({\n          questions: res.data,\n          isLoading: false\n        });\n      });\n    };\n\n    this.renderOptions = () => {\n      const {\n        currentIndex,\n        questions\n      } = this.state;\n      const {\n        options\n      } = questions[currentIndex];\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"optionsContainer\",\n        children: options.map(option => {\n          const {\n            optionNumber,\n            text,\n            isImage,\n            imageUrl\n          } = option;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"optionsRow\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"optionNumberContainer\",\n              children: optionNumber\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 29\n            }, this), isImage ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"optionImageContainer\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: imageUrl,\n                className: \"optionImage\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 39,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 33\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"optionTextContainer\",\n              children: text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 25\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }, this);\n    };\n\n    this.renderQuestion = () => {\n      const {\n        currentIndex,\n        questions\n      } = this.state;\n      const {\n        questionNumber,\n        text,\n        isImage,\n        imageUrl\n      } = questions[currentIndex];\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"questionContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"questionHeader\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"questionNumberContainer\",\n            children: questionNumber\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 21\n          }, this), isImage ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"questionImageContainer\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: imageUrl,\n              className: \"questionImage\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 25\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"questionTextContainer\",\n            children: text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 17\n        }, this), this.renderOptions()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this);\n    };\n\n    this.state = {\n      questions: [],\n      currentIndex: 0,\n      isLoading: true\n    };\n  }\n\n  render() {\n    const {\n      isLoading\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(QuestionCard, {\n        questions: questions,\n        currentIndex: currentIndex\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/abhinandan/Texts/mocktest/mocktest-web/src/components/TestScreen/index.js"],"names":["React","API","QuestionCard","TestScreen","PureComponent","constructor","props","componentDidMount","get","then","res","setState","questions","data","isLoading","renderOptions","currentIndex","state","options","map","option","optionNumber","text","isImage","imageUrl","renderQuestion","questionNumber","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './index.css';\nimport API from '../../utils/API';\nimport { QuestionCard } from '../QuestionCard';\n\nexport default class TestScreen extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            questions: [],\n            currentIndex: 0,\n            isLoading: true\n        }\n    }\n\n    componentDidMount = async () => {\n        API.get('mockTest/')\n            .then(res => {\n                this.setState({ questions: res.data, isLoading: false });\n            })\n\n    }\n\n    renderOptions = () => {\n        const { currentIndex, questions } = this.state;\n        const { options } = questions[currentIndex];\n        return (\n            <div className=\"optionsContainer\">\n                {options.map(option => {\n                    const { optionNumber, text, isImage, imageUrl } = option;\n                    return (\n                        <div className=\"optionsRow\">\n                            <div className=\"optionNumberContainer\">\n                                {optionNumber}\n                            </div>\n                            {isImage\n                                ?\n                                <div className=\"optionImageContainer\">\n                                    <img\n                                        src={imageUrl}\n                                        className=\"optionImage\" />\n                                </div>\n                                :\n                                <div className=\"optionTextContainer\">\n                                    {text}\n                                </div>}\n                        </div>\n                    )\n                })}\n            </div>\n        )\n    }\n\n    renderQuestion = () => {\n        const { currentIndex, questions } = this.state;\n        const { questionNumber, text, isImage, imageUrl } = questions[currentIndex];\n        return (\n            <div className=\"questionContainer\">\n                <div className=\"questionHeader\">\n                    <div className=\"questionNumberContainer\">\n                        {questionNumber}\n                    </div>\n                    {isImage\n                        ?\n                        <div className=\"questionImageContainer\">\n                            <img\n                                src={imageUrl}\n                                className=\"questionImage\" />\n                        </div>\n                        :\n                        <div className=\"questionTextContainer\">\n                            {text}\n                        </div>}\n                </div>\n                {this.renderOptions()}\n            </div>\n        )\n    }\n\n    render() {\n        const { isLoading } = this.state;\n        return (\n            <div className=\"container\">\n                {isLoading\n                    ?\n                    <div>Loading</div>\n                    :\n                    <QuestionCard questions={questions} currentIndex={currentIndex} />}\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}