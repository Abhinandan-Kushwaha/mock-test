{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/abhinandan/Texts/mocktest/mocktest-web/src/components/TestScreen/index.js\";\nimport React from 'react';\nimport './index.css';\nimport API from '../../utils/API';\nexport default class TestScreen extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = async () => {\n      API.get('mockTest/').then(res => {\n        this.setState({\n          questions: res.data,\n          isLoading: false\n        });\n      });\n    };\n\n    this.renderOptions = () => {\n      const {\n        currentIndex,\n        questions\n      } = this.state;\n      const {\n        options\n      } = questions[currentIndex];\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"optionsContainer\",\n        children: options.map(option => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"optionsRow\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"optionNumberContainer\",\n              children: option.optionNumber\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 25\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }, this);\n    };\n\n    this.renderQuestion = () => {\n      const {\n        currentIndex,\n        questions\n      } = this.state;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"questionContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"questionHeader\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"questionNumberContainer\",\n            children: questions[currentIndex].questionNumber\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"questionTextContainer\",\n            children: questions[currentIndex].text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 17\n        }, this), this.renderOptions()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this);\n    };\n\n    this.state = {\n      questions: [],\n      currentIndex: 0,\n      isLoading: true\n    };\n  }\n\n  render() {\n    const {\n      isLoading\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"This is the Test Screeen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this) : this.renderQuestion()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/abhinandan/Texts/mocktest/mocktest-web/src/components/TestScreen/index.js"],"names":["React","API","TestScreen","PureComponent","constructor","props","componentDidMount","get","then","res","setState","questions","data","isLoading","renderOptions","currentIndex","state","options","map","option","optionNumber","renderQuestion","questionNumber","text","render"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,iBAAhB;AAEA,eAAe,MAAMC,UAAN,SAAyBF,KAAK,CAACG,aAA/B,CAA6C;AACxDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SASnBC,iBATmB,GASC,YAAY;AAC5BL,MAAAA,GAAG,CAACM,GAAJ,CAAQ,WAAR,EACKC,IADL,CACUC,GAAG,IAAI;AACT,aAAKC,QAAL,CAAc;AAAEC,UAAAA,SAAS,EAAEF,GAAG,CAACG,IAAjB;AAAuBC,UAAAA,SAAS,EAAE;AAAlC,SAAd;AACH,OAHL;AAKH,KAfkB;;AAAA,SAiBnBC,aAjBmB,GAiBH,MAAM;AAClB,YAAM;AAAEC,QAAAA,YAAF;AAAgBJ,QAAAA;AAAhB,UAA8B,KAAKK,KAAzC;AACA,YAAM;AAAEC,QAAAA;AAAF,UAAcN,SAAS,CAACI,YAAD,CAA7B;AACA,0BACI;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,kBACKE,OAAO,CAACC,GAAR,CAAYC,MAAM,IAAI;AACnB,8BACI;AAAK,YAAA,SAAS,EAAC,YAAf;AAAA,mCACI;AAAK,cAAA,SAAS,EAAC,uBAAf;AAAA,wBACKA,MAAM,CAACC;AADZ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBADJ;AAOH,SARA;AADL;AAAA;AAAA;AAAA;AAAA,cADJ;AAaH,KAjCkB;;AAAA,SAmCnBC,cAnCmB,GAmCF,MAAM;AACnB,YAAM;AAAEN,QAAAA,YAAF;AAAgBJ,QAAAA;AAAhB,UAA8B,KAAKK,KAAzC;AACA,0BACI;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAA,gCACI;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,kCACI;AAAK,YAAA,SAAS,EAAC,yBAAf;AAAA,sBACKL,SAAS,CAACI,YAAD,CAAT,CAAwBO;AAD7B;AAAA;AAAA;AAAA;AAAA,kBADJ,eAII;AAAK,YAAA,SAAS,EAAC,uBAAf;AAAA,sBACKX,SAAS,CAACI,YAAD,CAAT,CAAwBQ;AAD7B;AAAA;AAAA;AAAA;AAAA,kBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EASK,KAAKT,aAAL,EATL;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAaH,KAlDkB;;AAEf,SAAKE,KAAL,GAAa;AACTL,MAAAA,SAAS,EAAE,EADF;AAETI,MAAAA,YAAY,EAAE,CAFL;AAGTF,MAAAA,SAAS,EAAE;AAHF,KAAb;AAKH;;AA6CDW,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEX,MAAAA;AAAF,QAAgB,KAAKG,KAA3B;AACA,wBACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAKKH,SAAS,gBACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADM,GAEN,KAAKQ,cAAL,EAPR;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAWH;;AAlEuD","sourcesContent":["import React from 'react';\nimport './index.css';\nimport API from '../../utils/API';\n\nexport default class TestScreen extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            questions: [],\n            currentIndex: 0,\n            isLoading: true\n        }\n    }\n\n    componentDidMount = async () => {\n        API.get('mockTest/')\n            .then(res => {\n                this.setState({ questions: res.data, isLoading: false });\n            })\n\n    }\n\n    renderOptions = () => {\n        const { currentIndex, questions } = this.state;\n        const { options } = questions[currentIndex];\n        return (\n            <div className=\"optionsContainer\">\n                {options.map(option => {\n                    return (\n                        <div className=\"optionsRow\">\n                            <div className=\"optionNumberContainer\">\n                                {option.optionNumber}\n                            </div>\n                        </div>\n                    )\n                })}\n            </div>\n        )\n    }\n\n    renderQuestion = () => {\n        const { currentIndex, questions } = this.state;\n        return (\n            <div className=\"questionContainer\">\n                <div className=\"questionHeader\">\n                    <div className=\"questionNumberContainer\">\n                        {questions[currentIndex].questionNumber}\n                    </div>\n                    <div className=\"questionTextContainer\">\n                        {questions[currentIndex].text}\n                    </div>\n                </div>\n                {this.renderOptions()}\n            </div>\n        )\n    }\n\n    render() {\n        const { isLoading } = this.state;\n        return (\n            <div className=\"container\">\n                <div>\n                    This is the Test Screeen\n                </div>\n\n                {isLoading ?\n                    <div>Loading</div> :\n                    this.renderQuestion()}\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}